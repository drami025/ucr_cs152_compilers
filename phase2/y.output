State 30 conflicts: 1 shift/reduce
State 51 conflicts: 1 shift/reduce
State 100 conflicts: 1 shift/reduce
State 103 conflicts: 1 shift/reduce
State 134 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program identifier semicolon block endprogram
    2      | /* empty */

    3 block: declarations beginprogram statements

    4 declarations: declaration semicolon declarations2

    5 declarations2: declarations
    6              | /* empty */

    7 declaration: identifier declaration2 colon array_block integer

    8 declaration2: comma identifier declaration2
    9             | /* empty */

   10 array_block: array l_paren number r_paren of
   11            | /* empty */

   12 statements: statement semicolon statements2

   13 statements2: statements
   14            | /* empty */

   15 if_else: Else statements
   16        | /* empty */

   17 statement: var assign exp
   18          | If bool_exp then statements if_else endif
   19          | While bool_exp beginloop statements endloop
   20          | Do beginloop statements endloop While bool_exp
   21          | read vars
   22          | write vars
   23          | Continue

   24 bool_exp: relation_and_exp or_exp

   25 or_exp: or bool_exp
   26       | /* empty */

   27 relation_and_exp: relation_exp and_exp

   28 and_exp: and relation_and_exp
   29        | /* empty */

   30 relation_exp: not_exp relation_exp2

   31 relation_exp2: exp comp exp
   32              | True
   33              | False
   34              | l_paren bool_exp r_paren

   35 not_exp: not
   36        | /* empty */

   37 comp: equal
   38     | not_equal
   39     | less_than
   40     | greater_than
   41     | less_than_eq
   42     | greater_than_eq

   43 exp: mult_exp add_exp sub_exp

   44 add_exp: add exp
   45        | /* empty */

   46 sub_exp: sub exp
   47        | /* empty */

   48 mult_exp: term mult_exp2 div_exp mod_exp

   49 mult_exp2: mult mult_exp
   50          | /* empty */

   51 div_exp: div mult_exp
   52        | /* empty */

   53 mod_exp: mod mult_exp
   54        | /* empty */

   55 term: sub_exp term2

   56 term2: var
   57      | number
   58      | l_paren exp r_paren

   59 vars: var vars2

   60 vars2: comma vars
   61      | /* empty */

   62 var: identifier
   63    | identifier l_paren exp r_paren

   64 program: PROGRAM

   65 beginprogram: BEGIN_PROGRAM

   66 identifier: IDENT

   67 colon: COLON

   68 comma: COMMA

   69 semicolon: SEMICOLON

   70 endprogram: END_PROGRAM

   71 array: ARRAY

   72 l_paren: L_PAREN

   73 number: NUMBER

   74 r_paren: R_PAREN

   75 of: OF

   76 If: IF

   77 then: THEN

   78 endif: ENDIF

   79 Else: ELSE

   80 While: WHILE

   81 Do: DO

   82 beginloop: BEGINLOOP

   83 endloop: ENDLOOP

   84 read: READ

   85 write: WRITE

   86 Continue: CONTINUE

   87 and: AND

   88 or: OR

   89 not: NOT

   90 True: TRUE

   91 False: FALSE

   92 equal: EQ

   93 not_equal: NEQ

   94 less_than: LT

   95 greater_than: GT

   96 less_than_eq: LTE

   97 greater_than_eq: GTE

   98 add: ADD

   99 sub: SUB

  100 mult: MULT

  101 div: DIV

  102 mod: MOD

  103 integer: INTEGER

  104 assign: ASSIGN


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 64
BEGIN_PROGRAM (259) 65
END_PROGRAM (260) 70
INTEGER (261) 103
ARRAY (262) 71
OF (263) 75
IF (264) 76
THEN (265) 77
ENDIF (266) 78
ELSE (267) 79
WHILE (268) 80
DO (269) 81
BEGINLOOP (270) 82
ENDLOOP (271) 83
CONTINUE (272) 86
READ (273) 84
WRITE (274) 85
AND (275) 87
OR (276) 88
NOT (277) 89
TRUE (278) 90
FALSE (279) 91
SUB (280) 99
ADD (281) 98
MULT (282) 100
DIV (283) 101
MOD (284) 102
EQ (285) 92
NEQ (286) 93
LT (287) 94
GT (288) 95
LTE (289) 96
GTE (290) 97
SEMICOLON (291) 69
COLON (292) 67
COMMA (293) 68
L_PAREN (294) 72
R_PAREN (295) 74
ASSIGN (296) 104
IDENT (297) 66
NUMBER (298) 73


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
start (45)
    on left: 1 2, on right: 0
block (46)
    on left: 3, on right: 1
declarations (47)
    on left: 4, on right: 3 5
declarations2 (48)
    on left: 5 6, on right: 4
declaration (49)
    on left: 7, on right: 4
declaration2 (50)
    on left: 8 9, on right: 7 8
array_block (51)
    on left: 10 11, on right: 7
statements (52)
    on left: 12, on right: 3 13 15 18 19 20
statements2 (53)
    on left: 13 14, on right: 12
if_else (54)
    on left: 15 16, on right: 18
statement (55)
    on left: 17 18 19 20 21 22 23, on right: 12
bool_exp (56)
    on left: 24, on right: 18 19 20 25 34
or_exp (57)
    on left: 25 26, on right: 24
relation_and_exp (58)
    on left: 27, on right: 24 28
and_exp (59)
    on left: 28 29, on right: 27
relation_exp (60)
    on left: 30, on right: 27
relation_exp2 (61)
    on left: 31 32 33 34, on right: 30
not_exp (62)
    on left: 35 36, on right: 30
comp (63)
    on left: 37 38 39 40 41 42, on right: 31
exp (64)
    on left: 43, on right: 17 31 44 46 58 63
add_exp (65)
    on left: 44 45, on right: 43
sub_exp (66)
    on left: 46 47, on right: 43 55
mult_exp (67)
    on left: 48, on right: 43 49 51 53
mult_exp2 (68)
    on left: 49 50, on right: 48
div_exp (69)
    on left: 51 52, on right: 48
mod_exp (70)
    on left: 53 54, on right: 48
term (71)
    on left: 55, on right: 48
term2 (72)
    on left: 56 57 58, on right: 55
vars (73)
    on left: 59, on right: 21 22 60
vars2 (74)
    on left: 60 61, on right: 59
var (75)
    on left: 62 63, on right: 17 56 59
program (76)
    on left: 64, on right: 1
beginprogram (77)
    on left: 65, on right: 3
identifier (78)
    on left: 66, on right: 1 7 8 62 63
colon (79)
    on left: 67, on right: 7
comma (80)
    on left: 68, on right: 8 60
semicolon (81)
    on left: 69, on right: 1 4 12
endprogram (82)
    on left: 70, on right: 1
array (83)
    on left: 71, on right: 10
l_paren (84)
    on left: 72, on right: 10 34 58 63
number (85)
    on left: 73, on right: 10 57
r_paren (86)
    on left: 74, on right: 10 34 58 63
of (87)
    on left: 75, on right: 10
If (88)
    on left: 76, on right: 18
then (89)
    on left: 77, on right: 18
endif (90)
    on left: 78, on right: 18
Else (91)
    on left: 79, on right: 15
While (92)
    on left: 80, on right: 19 20
Do (93)
    on left: 81, on right: 20
beginloop (94)
    on left: 82, on right: 19 20
endloop (95)
    on left: 83, on right: 19 20
read (96)
    on left: 84, on right: 21
write (97)
    on left: 85, on right: 22
Continue (98)
    on left: 86, on right: 23
and (99)
    on left: 87, on right: 28
or (100)
    on left: 88, on right: 25
not (101)
    on left: 89, on right: 35
True (102)
    on left: 90, on right: 32
False (103)
    on left: 91, on right: 33
equal (104)
    on left: 92, on right: 37
not_equal (105)
    on left: 93, on right: 38
less_than (106)
    on left: 94, on right: 39
greater_than (107)
    on left: 95, on right: 40
less_than_eq (108)
    on left: 96, on right: 41
greater_than_eq (109)
    on left: 97, on right: 42
add (110)
    on left: 98, on right: 44
sub (111)
    on left: 99, on right: 46
mult (112)
    on left: 100, on right: 49
div (113)
    on left: 101, on right: 51
mod (114)
    on left: 102, on right: 53
integer (115)
    on left: 103, on right: 7
assign (116)
    on left: 104, on right: 17


state 0

    0 $accept: . start $end

    PROGRAM  shift, and go to state 1

    $default  reduce using rule 2 (start)

    start    go to state 2
    program  go to state 3


state 1

   64 program: PROGRAM .

    $default  reduce using rule 64 (program)


state 2

    0 $accept: start . $end

    $end  shift, and go to state 4


state 3

    1 start: program . identifier semicolon block endprogram

    IDENT  shift, and go to state 5

    identifier  go to state 6


state 4

    0 $accept: start $end .

    $default  accept


state 5

   66 identifier: IDENT .

    $default  reduce using rule 66 (identifier)


state 6

    1 start: program identifier . semicolon block endprogram

    SEMICOLON  shift, and go to state 7

    semicolon  go to state 8


state 7

   69 semicolon: SEMICOLON .

    $default  reduce using rule 69 (semicolon)


state 8

    1 start: program identifier semicolon . block endprogram

    IDENT  shift, and go to state 5

    block         go to state 9
    declarations  go to state 10
    declaration   go to state 11
    identifier    go to state 12


state 9

    1 start: program identifier semicolon block . endprogram

    END_PROGRAM  shift, and go to state 13

    endprogram  go to state 14


state 10

    3 block: declarations . beginprogram statements

    BEGIN_PROGRAM  shift, and go to state 15

    beginprogram  go to state 16


state 11

    4 declarations: declaration . semicolon declarations2

    SEMICOLON  shift, and go to state 7

    semicolon  go to state 17


state 12

    7 declaration: identifier . declaration2 colon array_block integer

    COMMA  shift, and go to state 18

    $default  reduce using rule 9 (declaration2)

    declaration2  go to state 19
    comma         go to state 20


state 13

   70 endprogram: END_PROGRAM .

    $default  reduce using rule 70 (endprogram)


state 14

    1 start: program identifier semicolon block endprogram .

    $default  reduce using rule 1 (start)


state 15

   65 beginprogram: BEGIN_PROGRAM .

    $default  reduce using rule 65 (beginprogram)


state 16

    3 block: declarations beginprogram . statements

    IF        shift, and go to state 21
    WHILE     shift, and go to state 22
    DO        shift, and go to state 23
    CONTINUE  shift, and go to state 24
    READ      shift, and go to state 25
    WRITE     shift, and go to state 26
    IDENT     shift, and go to state 5

    statements  go to state 27
    statement   go to state 28
    var         go to state 29
    identifier  go to state 30
    If          go to state 31
    While       go to state 32
    Do          go to state 33
    read        go to state 34
    write       go to state 35
    Continue    go to state 36


state 17

    4 declarations: declaration semicolon . declarations2

    IDENT  shift, and go to state 5

    $default  reduce using rule 6 (declarations2)

    declarations   go to state 37
    declarations2  go to state 38
    declaration    go to state 11
    identifier     go to state 12


state 18

   68 comma: COMMA .

    $default  reduce using rule 68 (comma)


state 19

    7 declaration: identifier declaration2 . colon array_block integer

    COLON  shift, and go to state 39

    colon  go to state 40


state 20

    8 declaration2: comma . identifier declaration2

    IDENT  shift, and go to state 5

    identifier  go to state 41


state 21

   76 If: IF .

    $default  reduce using rule 76 (If)


state 22

   80 While: WHILE .

    $default  reduce using rule 80 (While)


state 23

   81 Do: DO .

    $default  reduce using rule 81 (Do)


state 24

   86 Continue: CONTINUE .

    $default  reduce using rule 86 (Continue)


state 25

   84 read: READ .

    $default  reduce using rule 84 (read)


state 26

   85 write: WRITE .

    $default  reduce using rule 85 (write)


state 27

    3 block: declarations beginprogram statements .

    $default  reduce using rule 3 (block)


state 28

   12 statements: statement . semicolon statements2

    SEMICOLON  shift, and go to state 7

    semicolon  go to state 42


state 29

   17 statement: var . assign exp

    ASSIGN  shift, and go to state 43

    assign  go to state 44


state 30

   62 var: identifier .
   63    | identifier . l_paren exp r_paren

    L_PAREN  shift, and go to state 45

    L_PAREN   [reduce using rule 62 (var)]
    $default  reduce using rule 62 (var)

    l_paren  go to state 46


state 31

   18 statement: If . bool_exp then statements if_else endif

    NOT  shift, and go to state 47

    $default  reduce using rule 36 (not_exp)

    bool_exp          go to state 48
    relation_and_exp  go to state 49
    relation_exp      go to state 50
    not_exp           go to state 51
    not               go to state 52


state 32

   19 statement: While . bool_exp beginloop statements endloop

    NOT  shift, and go to state 47

    $default  reduce using rule 36 (not_exp)

    bool_exp          go to state 53
    relation_and_exp  go to state 49
    relation_exp      go to state 50
    not_exp           go to state 51
    not               go to state 52


state 33

   20 statement: Do . beginloop statements endloop While bool_exp

    BEGINLOOP  shift, and go to state 54

    beginloop  go to state 55


state 34

   21 statement: read . vars

    IDENT  shift, and go to state 5

    vars        go to state 56
    var         go to state 57
    identifier  go to state 30


state 35

   22 statement: write . vars

    IDENT  shift, and go to state 5

    vars        go to state 58
    var         go to state 57
    identifier  go to state 30


state 36

   23 statement: Continue .

    $default  reduce using rule 23 (statement)


state 37

    5 declarations2: declarations .

    $default  reduce using rule 5 (declarations2)


state 38

    4 declarations: declaration semicolon declarations2 .

    $default  reduce using rule 4 (declarations)


state 39

   67 colon: COLON .

    $default  reduce using rule 67 (colon)


state 40

    7 declaration: identifier declaration2 colon . array_block integer

    ARRAY  shift, and go to state 59

    $default  reduce using rule 11 (array_block)

    array_block  go to state 60
    array        go to state 61


state 41

    8 declaration2: comma identifier . declaration2

    COMMA  shift, and go to state 18

    $default  reduce using rule 9 (declaration2)

    declaration2  go to state 62
    comma         go to state 20


state 42

   12 statements: statement semicolon . statements2

    IF        shift, and go to state 21
    WHILE     shift, and go to state 22
    DO        shift, and go to state 23
    CONTINUE  shift, and go to state 24
    READ      shift, and go to state 25
    WRITE     shift, and go to state 26
    IDENT     shift, and go to state 5

    $default  reduce using rule 14 (statements2)

    statements   go to state 63
    statements2  go to state 64
    statement    go to state 28
    var          go to state 29
    identifier   go to state 30
    If           go to state 31
    While        go to state 32
    Do           go to state 33
    read         go to state 34
    write        go to state 35
    Continue     go to state 36


state 43

  104 assign: ASSIGN .

    $default  reduce using rule 104 (assign)


state 44

   17 statement: var assign . exp

    SUB  shift, and go to state 65

    $default  reduce using rule 47 (sub_exp)

    exp       go to state 66
    sub_exp   go to state 67
    mult_exp  go to state 68
    term      go to state 69
    sub       go to state 70


state 45

   72 l_paren: L_PAREN .

    $default  reduce using rule 72 (l_paren)


state 46

   63 var: identifier l_paren . exp r_paren

    SUB  shift, and go to state 65

    $default  reduce using rule 47 (sub_exp)

    exp       go to state 71
    sub_exp   go to state 67
    mult_exp  go to state 68
    term      go to state 69
    sub       go to state 70


state 47

   89 not: NOT .

    $default  reduce using rule 89 (not)


state 48

   18 statement: If bool_exp . then statements if_else endif

    THEN  shift, and go to state 72

    then  go to state 73


state 49

   24 bool_exp: relation_and_exp . or_exp

    OR  shift, and go to state 74

    $default  reduce using rule 26 (or_exp)

    or_exp  go to state 75
    or      go to state 76


state 50

   27 relation_and_exp: relation_exp . and_exp

    AND  shift, and go to state 77

    $default  reduce using rule 29 (and_exp)

    and_exp  go to state 78
    and      go to state 79


state 51

   30 relation_exp: not_exp . relation_exp2

    TRUE     shift, and go to state 80
    FALSE    shift, and go to state 81
    SUB      shift, and go to state 65
    L_PAREN  shift, and go to state 45

    L_PAREN   [reduce using rule 47 (sub_exp)]
    $default  reduce using rule 47 (sub_exp)

    relation_exp2  go to state 82
    exp            go to state 83
    sub_exp        go to state 67
    mult_exp       go to state 68
    term           go to state 69
    l_paren        go to state 84
    True           go to state 85
    False          go to state 86
    sub            go to state 70


state 52

   35 not_exp: not .

    $default  reduce using rule 35 (not_exp)


state 53

   19 statement: While bool_exp . beginloop statements endloop

    BEGINLOOP  shift, and go to state 54

    beginloop  go to state 87


state 54

   82 beginloop: BEGINLOOP .

    $default  reduce using rule 82 (beginloop)


state 55

   20 statement: Do beginloop . statements endloop While bool_exp

    IF        shift, and go to state 21
    WHILE     shift, and go to state 22
    DO        shift, and go to state 23
    CONTINUE  shift, and go to state 24
    READ      shift, and go to state 25
    WRITE     shift, and go to state 26
    IDENT     shift, and go to state 5

    statements  go to state 88
    statement   go to state 28
    var         go to state 29
    identifier  go to state 30
    If          go to state 31
    While       go to state 32
    Do          go to state 33
    read        go to state 34
    write       go to state 35
    Continue    go to state 36


state 56

   21 statement: read vars .

    $default  reduce using rule 21 (statement)


state 57

   59 vars: var . vars2

    COMMA  shift, and go to state 18

    $default  reduce using rule 61 (vars2)

    vars2  go to state 89
    comma  go to state 90


state 58

   22 statement: write vars .

    $default  reduce using rule 22 (statement)


state 59

   71 array: ARRAY .

    $default  reduce using rule 71 (array)


state 60

    7 declaration: identifier declaration2 colon array_block . integer

    INTEGER  shift, and go to state 91

    integer  go to state 92


state 61

   10 array_block: array . l_paren number r_paren of

    L_PAREN  shift, and go to state 45

    l_paren  go to state 93


state 62

    8 declaration2: comma identifier declaration2 .

    $default  reduce using rule 8 (declaration2)


state 63

   13 statements2: statements .

    $default  reduce using rule 13 (statements2)


state 64

   12 statements: statement semicolon statements2 .

    $default  reduce using rule 12 (statements)


state 65

   99 sub: SUB .

    $default  reduce using rule 99 (sub)


state 66

   17 statement: var assign exp .

    $default  reduce using rule 17 (statement)


state 67

   55 term: sub_exp . term2

    L_PAREN  shift, and go to state 45
    IDENT    shift, and go to state 5
    NUMBER   shift, and go to state 94

    term2       go to state 95
    var         go to state 96
    identifier  go to state 30
    l_paren     go to state 97
    number      go to state 98


state 68

   43 exp: mult_exp . add_exp sub_exp

    ADD  shift, and go to state 99

    $default  reduce using rule 45 (add_exp)

    add_exp  go to state 100
    add      go to state 101


state 69

   48 mult_exp: term . mult_exp2 div_exp mod_exp

    MULT  shift, and go to state 102

    $default  reduce using rule 50 (mult_exp2)

    mult_exp2  go to state 103
    mult       go to state 104


state 70

   46 sub_exp: sub . exp

    SUB  shift, and go to state 65

    $default  reduce using rule 47 (sub_exp)

    exp       go to state 105
    sub_exp   go to state 67
    mult_exp  go to state 68
    term      go to state 69
    sub       go to state 70


state 71

   63 var: identifier l_paren exp . r_paren

    R_PAREN  shift, and go to state 106

    r_paren  go to state 107


state 72

   77 then: THEN .

    $default  reduce using rule 77 (then)


state 73

   18 statement: If bool_exp then . statements if_else endif

    IF        shift, and go to state 21
    WHILE     shift, and go to state 22
    DO        shift, and go to state 23
    CONTINUE  shift, and go to state 24
    READ      shift, and go to state 25
    WRITE     shift, and go to state 26
    IDENT     shift, and go to state 5

    statements  go to state 108
    statement   go to state 28
    var         go to state 29
    identifier  go to state 30
    If          go to state 31
    While       go to state 32
    Do          go to state 33
    read        go to state 34
    write       go to state 35
    Continue    go to state 36


state 74

   88 or: OR .

    $default  reduce using rule 88 (or)


state 75

   24 bool_exp: relation_and_exp or_exp .

    $default  reduce using rule 24 (bool_exp)


state 76

   25 or_exp: or . bool_exp

    NOT  shift, and go to state 47

    $default  reduce using rule 36 (not_exp)

    bool_exp          go to state 109
    relation_and_exp  go to state 49
    relation_exp      go to state 50
    not_exp           go to state 51
    not               go to state 52


state 77

   87 and: AND .

    $default  reduce using rule 87 (and)


state 78

   27 relation_and_exp: relation_exp and_exp .

    $default  reduce using rule 27 (relation_and_exp)


state 79

   28 and_exp: and . relation_and_exp

    NOT  shift, and go to state 47

    $default  reduce using rule 36 (not_exp)

    relation_and_exp  go to state 110
    relation_exp      go to state 50
    not_exp           go to state 51
    not               go to state 52


state 80

   90 True: TRUE .

    $default  reduce using rule 90 (True)


state 81

   91 False: FALSE .

    $default  reduce using rule 91 (False)


state 82

   30 relation_exp: not_exp relation_exp2 .

    $default  reduce using rule 30 (relation_exp)


state 83

   31 relation_exp2: exp . comp exp

    EQ   shift, and go to state 111
    NEQ  shift, and go to state 112
    LT   shift, and go to state 113
    GT   shift, and go to state 114
    LTE  shift, and go to state 115
    GTE  shift, and go to state 116

    comp             go to state 117
    equal            go to state 118
    not_equal        go to state 119
    less_than        go to state 120
    greater_than     go to state 121
    less_than_eq     go to state 122
    greater_than_eq  go to state 123


state 84

   34 relation_exp2: l_paren . bool_exp r_paren

    NOT  shift, and go to state 47

    $default  reduce using rule 36 (not_exp)

    bool_exp          go to state 124
    relation_and_exp  go to state 49
    relation_exp      go to state 50
    not_exp           go to state 51
    not               go to state 52


state 85

   32 relation_exp2: True .

    $default  reduce using rule 32 (relation_exp2)


state 86

   33 relation_exp2: False .

    $default  reduce using rule 33 (relation_exp2)


state 87

   19 statement: While bool_exp beginloop . statements endloop

    IF        shift, and go to state 21
    WHILE     shift, and go to state 22
    DO        shift, and go to state 23
    CONTINUE  shift, and go to state 24
    READ      shift, and go to state 25
    WRITE     shift, and go to state 26
    IDENT     shift, and go to state 5

    statements  go to state 125
    statement   go to state 28
    var         go to state 29
    identifier  go to state 30
    If          go to state 31
    While       go to state 32
    Do          go to state 33
    read        go to state 34
    write       go to state 35
    Continue    go to state 36


state 88

   20 statement: Do beginloop statements . endloop While bool_exp

    ENDLOOP  shift, and go to state 126

    endloop  go to state 127


state 89

   59 vars: var vars2 .

    $default  reduce using rule 59 (vars)


state 90

   60 vars2: comma . vars

    IDENT  shift, and go to state 5

    vars        go to state 128
    var         go to state 57
    identifier  go to state 30


state 91

  103 integer: INTEGER .

    $default  reduce using rule 103 (integer)


state 92

    7 declaration: identifier declaration2 colon array_block integer .

    $default  reduce using rule 7 (declaration)


state 93

   10 array_block: array l_paren . number r_paren of

    NUMBER  shift, and go to state 94

    number  go to state 129


state 94

   73 number: NUMBER .

    $default  reduce using rule 73 (number)


state 95

   55 term: sub_exp term2 .

    $default  reduce using rule 55 (term)


state 96

   56 term2: var .

    $default  reduce using rule 56 (term2)


state 97

   58 term2: l_paren . exp r_paren

    SUB  shift, and go to state 65

    $default  reduce using rule 47 (sub_exp)

    exp       go to state 130
    sub_exp   go to state 67
    mult_exp  go to state 68
    term      go to state 69
    sub       go to state 70


state 98

   57 term2: number .

    $default  reduce using rule 57 (term2)


state 99

   98 add: ADD .

    $default  reduce using rule 98 (add)


state 100

   43 exp: mult_exp add_exp . sub_exp

    SUB  shift, and go to state 65

    SUB       [reduce using rule 47 (sub_exp)]
    $default  reduce using rule 47 (sub_exp)

    sub_exp  go to state 131
    sub      go to state 70


state 101

   44 add_exp: add . exp

    SUB  shift, and go to state 65

    $default  reduce using rule 47 (sub_exp)

    exp       go to state 132
    sub_exp   go to state 67
    mult_exp  go to state 68
    term      go to state 69
    sub       go to state 70


state 102

  100 mult: MULT .

    $default  reduce using rule 100 (mult)


state 103

   48 mult_exp: term mult_exp2 . div_exp mod_exp

    DIV  shift, and go to state 133

    DIV       [reduce using rule 52 (div_exp)]
    $default  reduce using rule 52 (div_exp)

    div_exp  go to state 134
    div      go to state 135


state 104

   49 mult_exp2: mult . mult_exp

    SUB  shift, and go to state 65

    $default  reduce using rule 47 (sub_exp)

    sub_exp   go to state 67
    mult_exp  go to state 136
    term      go to state 69
    sub       go to state 70


state 105

   46 sub_exp: sub exp .

    $default  reduce using rule 46 (sub_exp)


state 106

   74 r_paren: R_PAREN .

    $default  reduce using rule 74 (r_paren)


state 107

   63 var: identifier l_paren exp r_paren .

    $default  reduce using rule 63 (var)


state 108

   18 statement: If bool_exp then statements . if_else endif

    ELSE  shift, and go to state 137

    $default  reduce using rule 16 (if_else)

    if_else  go to state 138
    Else     go to state 139


state 109

   25 or_exp: or bool_exp .

    $default  reduce using rule 25 (or_exp)


state 110

   28 and_exp: and relation_and_exp .

    $default  reduce using rule 28 (and_exp)


state 111

   92 equal: EQ .

    $default  reduce using rule 92 (equal)


state 112

   93 not_equal: NEQ .

    $default  reduce using rule 93 (not_equal)


state 113

   94 less_than: LT .

    $default  reduce using rule 94 (less_than)


state 114

   95 greater_than: GT .

    $default  reduce using rule 95 (greater_than)


state 115

   96 less_than_eq: LTE .

    $default  reduce using rule 96 (less_than_eq)


state 116

   97 greater_than_eq: GTE .

    $default  reduce using rule 97 (greater_than_eq)


state 117

   31 relation_exp2: exp comp . exp

    SUB  shift, and go to state 65

    $default  reduce using rule 47 (sub_exp)

    exp       go to state 140
    sub_exp   go to state 67
    mult_exp  go to state 68
    term      go to state 69
    sub       go to state 70


state 118

   37 comp: equal .

    $default  reduce using rule 37 (comp)


state 119

   38 comp: not_equal .

    $default  reduce using rule 38 (comp)


state 120

   39 comp: less_than .

    $default  reduce using rule 39 (comp)


state 121

   40 comp: greater_than .

    $default  reduce using rule 40 (comp)


state 122

   41 comp: less_than_eq .

    $default  reduce using rule 41 (comp)


state 123

   42 comp: greater_than_eq .

    $default  reduce using rule 42 (comp)


state 124

   34 relation_exp2: l_paren bool_exp . r_paren

    R_PAREN  shift, and go to state 106

    r_paren  go to state 141


state 125

   19 statement: While bool_exp beginloop statements . endloop

    ENDLOOP  shift, and go to state 126

    endloop  go to state 142


state 126

   83 endloop: ENDLOOP .

    $default  reduce using rule 83 (endloop)


state 127

   20 statement: Do beginloop statements endloop . While bool_exp

    WHILE  shift, and go to state 22

    While  go to state 143


state 128

   60 vars2: comma vars .

    $default  reduce using rule 60 (vars2)


state 129

   10 array_block: array l_paren number . r_paren of

    R_PAREN  shift, and go to state 106

    r_paren  go to state 144


state 130

   58 term2: l_paren exp . r_paren

    R_PAREN  shift, and go to state 106

    r_paren  go to state 145


state 131

   43 exp: mult_exp add_exp sub_exp .

    $default  reduce using rule 43 (exp)


state 132

   44 add_exp: add exp .

    $default  reduce using rule 44 (add_exp)


state 133

  101 div: DIV .

    $default  reduce using rule 101 (div)


state 134

   48 mult_exp: term mult_exp2 div_exp . mod_exp

    MOD  shift, and go to state 146

    MOD       [reduce using rule 54 (mod_exp)]
    $default  reduce using rule 54 (mod_exp)

    mod_exp  go to state 147
    mod      go to state 148


state 135

   51 div_exp: div . mult_exp

    SUB  shift, and go to state 65

    $default  reduce using rule 47 (sub_exp)

    sub_exp   go to state 67
    mult_exp  go to state 149
    term      go to state 69
    sub       go to state 70


state 136

   49 mult_exp2: mult mult_exp .

    $default  reduce using rule 49 (mult_exp2)


state 137

   79 Else: ELSE .

    $default  reduce using rule 79 (Else)


state 138

   18 statement: If bool_exp then statements if_else . endif

    ENDIF  shift, and go to state 150

    endif  go to state 151


state 139

   15 if_else: Else . statements

    IF        shift, and go to state 21
    WHILE     shift, and go to state 22
    DO        shift, and go to state 23
    CONTINUE  shift, and go to state 24
    READ      shift, and go to state 25
    WRITE     shift, and go to state 26
    IDENT     shift, and go to state 5

    statements  go to state 152
    statement   go to state 28
    var         go to state 29
    identifier  go to state 30
    If          go to state 31
    While       go to state 32
    Do          go to state 33
    read        go to state 34
    write       go to state 35
    Continue    go to state 36


state 140

   31 relation_exp2: exp comp exp .

    $default  reduce using rule 31 (relation_exp2)


state 141

   34 relation_exp2: l_paren bool_exp r_paren .

    $default  reduce using rule 34 (relation_exp2)


state 142

   19 statement: While bool_exp beginloop statements endloop .

    $default  reduce using rule 19 (statement)


state 143

   20 statement: Do beginloop statements endloop While . bool_exp

    NOT  shift, and go to state 47

    $default  reduce using rule 36 (not_exp)

    bool_exp          go to state 153
    relation_and_exp  go to state 49
    relation_exp      go to state 50
    not_exp           go to state 51
    not               go to state 52


state 144

   10 array_block: array l_paren number r_paren . of

    OF  shift, and go to state 154

    of  go to state 155


state 145

   58 term2: l_paren exp r_paren .

    $default  reduce using rule 58 (term2)


state 146

  102 mod: MOD .

    $default  reduce using rule 102 (mod)


state 147

   48 mult_exp: term mult_exp2 div_exp mod_exp .

    $default  reduce using rule 48 (mult_exp)


state 148

   53 mod_exp: mod . mult_exp

    SUB  shift, and go to state 65

    $default  reduce using rule 47 (sub_exp)

    sub_exp   go to state 67
    mult_exp  go to state 156
    term      go to state 69
    sub       go to state 70


state 149

   51 div_exp: div mult_exp .

    $default  reduce using rule 51 (div_exp)


state 150

   78 endif: ENDIF .

    $default  reduce using rule 78 (endif)


state 151

   18 statement: If bool_exp then statements if_else endif .

    $default  reduce using rule 18 (statement)


state 152

   15 if_else: Else statements .

    $default  reduce using rule 15 (if_else)


state 153

   20 statement: Do beginloop statements endloop While bool_exp .

    $default  reduce using rule 20 (statement)


state 154

   75 of: OF .

    $default  reduce using rule 75 (of)


state 155

   10 array_block: array l_paren number r_paren of .

    $default  reduce using rule 10 (array_block)


state 156

   53 mod_exp: mod mult_exp .

    $default  reduce using rule 53 (mod_exp)
