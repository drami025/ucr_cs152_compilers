State 31 conflicts: 1 shift/reduce
State 47 conflicts: 1 shift/reduce
State 52 conflicts: 1 shift/reduce
State 102 conflicts: 1 shift/reduce
State 105 conflicts: 1 shift/reduce
State 134 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 @1: /* empty */

    2 start: program identifier @1 semicolon block endprogram
    3      | /* empty */

    4 block: declarations beginprogram statements

    5 declarations: declaration semicolon declarations2

    6 declarations2: declarations
    7              | /* empty */

    8 declaration: identifier declaration2 colon array_block integer

    9 declaration2: comma identifier declaration2
   10             | /* empty */

   11 array_block: array l_paren neg_array number r_paren of
   12            | /* empty */

   13 neg_array: sub
   14          | /* empty */

   15 statements: statement semicolon statements2

   16 statements2: statements
   17            | /* empty */

   18 @2: /* empty */

   19 if_else: Else @2 statements
   20        | /* empty */

   21 statement: var assign exp

   22 @3: /* empty */

   23 statement: If bool_exp then @3 statements if_else endif

   24 @4: /* empty */

   25 @5: /* empty */

   26 statement: While @4 bool_exp @5 beginloop statements endloop

   27 @6: /* empty */

   28 @7: /* empty */

   29 statement: Do beginloop @6 statements endloop While @7 bool_exp
   30          | read vars
   31          | write vars
   32          | Continue

   33 bool_exp: relation_and_exp or_exp

   34 or_exp: or bool_exp
   35       | /* empty */

   36 relation_and_exp: relation_exp and_exp

   37 and_exp: and relation_and_exp
   38        | /* empty */

   39 relation_exp: not_exp relation_exp2

   40 relation_exp2: exp comp exp
   41              | True
   42              | False
   43              | l_paren bool_exp r_paren

   44 not_exp: not
   45        | /* empty */

   46 comp: equal
   47     | not_equal
   48     | less_than
   49     | greater_than
   50     | less_than_eq
   51     | greater_than_eq

   52 exp: mult_exp add_exp sub_exp

   53 add_exp: add exp
   54        | /* empty */

   55 sub_exp: sub exp
   56        | /* empty */

   57 mult_exp: term mult_exp2 div_exp mod_exp

   58 mult_exp2: mult mult_exp
   59          | /* empty */

   60 div_exp: div mult_exp
   61        | /* empty */

   62 mod_exp: mod mult_exp
   63        | /* empty */

   64 term: sub_exp term2

   65 term2: var
   66      | number
   67      | l_paren exp r_paren

   68 vars: var vars2

   69 vars2: comma vars
   70      | /* empty */

   71 var: identifier
   72    | identifier l_paren neg_array exp r_paren

   73 program: PROGRAM

   74 beginprogram: BEGIN_PROGRAM

   75 identifier: IDENT

   76 colon: COLON

   77 comma: COMMA

   78 semicolon: SEMICOLON

   79 endprogram: END_PROGRAM

   80 array: ARRAY

   81 l_paren: L_PAREN

   82 number: NUMBER

   83 r_paren: R_PAREN

   84 of: OF

   85 If: IF

   86 then: THEN

   87 endif: ENDIF

   88 Else: ELSE

   89 While: WHILE

   90 Do: DO

   91 beginloop: BEGINLOOP

   92 endloop: ENDLOOP

   93 read: READ

   94 write: WRITE

   95 Continue: CONTINUE

   96 and: AND

   97 or: OR

   98 not: NOT

   99 True: TRUE

  100 False: FALSE

  101 equal: EQ

  102 not_equal: NEQ

  103 less_than: LT

  104 greater_than: GT

  105 less_than_eq: LTE

  106 greater_than_eq: GTE

  107 add: ADD

  108 sub: SUB

  109 mult: MULT

  110 div: DIV

  111 mod: MOD

  112 integer: INTEGER

  113 assign: ASSIGN


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 73
BEGIN_PROGRAM (259) 74
END_PROGRAM (260) 79
INTEGER (261) 112
ARRAY (262) 80
OF (263) 84
IF (264) 85
THEN (265) 86
ENDIF (266) 87
ELSE (267) 88
WHILE (268) 89
DO (269) 90
BEGINLOOP (270) 91
ENDLOOP (271) 92
CONTINUE (272) 95
READ (273) 93
WRITE (274) 94
AND (275) 96
OR (276) 97
NOT (277) 98
TRUE (278) 99
FALSE (279) 100
SUB (280) 108
ADD (281) 107
MULT (282) 109
DIV (283) 110
MOD (284) 111
EQ (285) 101
NEQ (286) 102
LT (287) 103
GT (288) 104
LTE (289) 105
GTE (290) 106
SEMICOLON (291) 78
COLON (292) 76
COMMA (293) 77
L_PAREN (294) 81
R_PAREN (295) 83
ASSIGN (296) 113
IDENT (297) 75
NUMBER (298) 82


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
start (45)
    on left: 2 3, on right: 0
@1 (46)
    on left: 1, on right: 2
block (47)
    on left: 4, on right: 2
declarations (48)
    on left: 5, on right: 4 6
declarations2 (49)
    on left: 6 7, on right: 5
declaration (50)
    on left: 8, on right: 5
declaration2 (51)
    on left: 9 10, on right: 8 9
array_block (52)
    on left: 11 12, on right: 8
neg_array (53)
    on left: 13 14, on right: 11 72
statements (54)
    on left: 15, on right: 4 16 19 23 26 29
statements2 (55)
    on left: 16 17, on right: 15
if_else (56)
    on left: 19 20, on right: 23
@2 (57)
    on left: 18, on right: 19
statement (58)
    on left: 21 23 26 29 30 31 32, on right: 15
@3 (59)
    on left: 22, on right: 23
@4 (60)
    on left: 24, on right: 26
@5 (61)
    on left: 25, on right: 26
@6 (62)
    on left: 27, on right: 29
@7 (63)
    on left: 28, on right: 29
bool_exp (64)
    on left: 33, on right: 23 26 29 34 43
or_exp (65)
    on left: 34 35, on right: 33
relation_and_exp (66)
    on left: 36, on right: 33 37
and_exp (67)
    on left: 37 38, on right: 36
relation_exp (68)
    on left: 39, on right: 36
relation_exp2 (69)
    on left: 40 41 42 43, on right: 39
not_exp (70)
    on left: 44 45, on right: 39
comp (71)
    on left: 46 47 48 49 50 51, on right: 40
exp (72)
    on left: 52, on right: 21 40 53 55 67 72
add_exp (73)
    on left: 53 54, on right: 52
sub_exp (74)
    on left: 55 56, on right: 52 64
mult_exp (75)
    on left: 57, on right: 52 58 60 62
mult_exp2 (76)
    on left: 58 59, on right: 57
div_exp (77)
    on left: 60 61, on right: 57
mod_exp (78)
    on left: 62 63, on right: 57
term (79)
    on left: 64, on right: 57
term2 (80)
    on left: 65 66 67, on right: 64
vars (81)
    on left: 68, on right: 30 31 69
vars2 (82)
    on left: 69 70, on right: 68
var (83)
    on left: 71 72, on right: 21 65 68
program (84)
    on left: 73, on right: 2
beginprogram (85)
    on left: 74, on right: 4
identifier (86)
    on left: 75, on right: 2 8 9 71 72
colon (87)
    on left: 76, on right: 8
comma (88)
    on left: 77, on right: 9 69
semicolon (89)
    on left: 78, on right: 2 5 15
endprogram (90)
    on left: 79, on right: 2
array (91)
    on left: 80, on right: 11
l_paren (92)
    on left: 81, on right: 11 43 67 72
number (93)
    on left: 82, on right: 11 66
r_paren (94)
    on left: 83, on right: 11 43 67 72
of (95)
    on left: 84, on right: 11
If (96)
    on left: 85, on right: 23
then (97)
    on left: 86, on right: 23
endif (98)
    on left: 87, on right: 23
Else (99)
    on left: 88, on right: 19
While (100)
    on left: 89, on right: 26 29
Do (101)
    on left: 90, on right: 29
beginloop (102)
    on left: 91, on right: 26 29
endloop (103)
    on left: 92, on right: 26 29
read (104)
    on left: 93, on right: 30
write (105)
    on left: 94, on right: 31
Continue (106)
    on left: 95, on right: 32
and (107)
    on left: 96, on right: 37
or (108)
    on left: 97, on right: 34
not (109)
    on left: 98, on right: 44
True (110)
    on left: 99, on right: 41
False (111)
    on left: 100, on right: 42
equal (112)
    on left: 101, on right: 46
not_equal (113)
    on left: 102, on right: 47
less_than (114)
    on left: 103, on right: 48
greater_than (115)
    on left: 104, on right: 49
less_than_eq (116)
    on left: 105, on right: 50
greater_than_eq (117)
    on left: 106, on right: 51
add (118)
    on left: 107, on right: 53
sub (119)
    on left: 108, on right: 13 55
mult (120)
    on left: 109, on right: 58
div (121)
    on left: 110, on right: 60
mod (122)
    on left: 111, on right: 62
integer (123)
    on left: 112, on right: 8
assign (124)
    on left: 113, on right: 21


state 0

    0 $accept: . start $end

    PROGRAM  shift, and go to state 1

    $default  reduce using rule 3 (start)

    start    go to state 2
    program  go to state 3


state 1

   73 program: PROGRAM .

    $default  reduce using rule 73 (program)


state 2

    0 $accept: start . $end

    $end  shift, and go to state 4


state 3

    2 start: program . identifier @1 semicolon block endprogram

    IDENT  shift, and go to state 5

    identifier  go to state 6


state 4

    0 $accept: start $end .

    $default  accept


state 5

   75 identifier: IDENT .

    $default  reduce using rule 75 (identifier)


state 6

    2 start: program identifier . @1 semicolon block endprogram

    $default  reduce using rule 1 (@1)

    @1  go to state 7


state 7

    2 start: program identifier @1 . semicolon block endprogram

    SEMICOLON  shift, and go to state 8

    semicolon  go to state 9


state 8

   78 semicolon: SEMICOLON .

    $default  reduce using rule 78 (semicolon)


state 9

    2 start: program identifier @1 semicolon . block endprogram

    IDENT  shift, and go to state 5

    block         go to state 10
    declarations  go to state 11
    declaration   go to state 12
    identifier    go to state 13


state 10

    2 start: program identifier @1 semicolon block . endprogram

    END_PROGRAM  shift, and go to state 14

    endprogram  go to state 15


state 11

    4 block: declarations . beginprogram statements

    BEGIN_PROGRAM  shift, and go to state 16

    beginprogram  go to state 17


state 12

    5 declarations: declaration . semicolon declarations2

    SEMICOLON  shift, and go to state 8

    semicolon  go to state 18


state 13

    8 declaration: identifier . declaration2 colon array_block integer

    COMMA  shift, and go to state 19

    $default  reduce using rule 10 (declaration2)

    declaration2  go to state 20
    comma         go to state 21


state 14

   79 endprogram: END_PROGRAM .

    $default  reduce using rule 79 (endprogram)


state 15

    2 start: program identifier @1 semicolon block endprogram .

    $default  reduce using rule 2 (start)


state 16

   74 beginprogram: BEGIN_PROGRAM .

    $default  reduce using rule 74 (beginprogram)


state 17

    4 block: declarations beginprogram . statements

    IF        shift, and go to state 22
    WHILE     shift, and go to state 23
    DO        shift, and go to state 24
    CONTINUE  shift, and go to state 25
    READ      shift, and go to state 26
    WRITE     shift, and go to state 27
    IDENT     shift, and go to state 5

    statements  go to state 28
    statement   go to state 29
    var         go to state 30
    identifier  go to state 31
    If          go to state 32
    While       go to state 33
    Do          go to state 34
    read        go to state 35
    write       go to state 36
    Continue    go to state 37


state 18

    5 declarations: declaration semicolon . declarations2

    IDENT  shift, and go to state 5

    $default  reduce using rule 7 (declarations2)

    declarations   go to state 38
    declarations2  go to state 39
    declaration    go to state 12
    identifier     go to state 13


state 19

   77 comma: COMMA .

    $default  reduce using rule 77 (comma)


state 20

    8 declaration: identifier declaration2 . colon array_block integer

    COLON  shift, and go to state 40

    colon  go to state 41


state 21

    9 declaration2: comma . identifier declaration2

    IDENT  shift, and go to state 5

    identifier  go to state 42


state 22

   85 If: IF .

    $default  reduce using rule 85 (If)


state 23

   89 While: WHILE .

    $default  reduce using rule 89 (While)


state 24

   90 Do: DO .

    $default  reduce using rule 90 (Do)


state 25

   95 Continue: CONTINUE .

    $default  reduce using rule 95 (Continue)


state 26

   93 read: READ .

    $default  reduce using rule 93 (read)


state 27

   94 write: WRITE .

    $default  reduce using rule 94 (write)


state 28

    4 block: declarations beginprogram statements .

    $default  reduce using rule 4 (block)


state 29

   15 statements: statement . semicolon statements2

    SEMICOLON  shift, and go to state 8

    semicolon  go to state 43


state 30

   21 statement: var . assign exp

    ASSIGN  shift, and go to state 44

    assign  go to state 45


state 31

   71 var: identifier .
   72    | identifier . l_paren neg_array exp r_paren

    L_PAREN  shift, and go to state 46

    L_PAREN   [reduce using rule 71 (var)]
    $default  reduce using rule 71 (var)

    l_paren  go to state 47


state 32

   23 statement: If . bool_exp then @3 statements if_else endif

    NOT  shift, and go to state 48

    $default  reduce using rule 45 (not_exp)

    bool_exp          go to state 49
    relation_and_exp  go to state 50
    relation_exp      go to state 51
    not_exp           go to state 52
    not               go to state 53


state 33

   26 statement: While . @4 bool_exp @5 beginloop statements endloop

    $default  reduce using rule 24 (@4)

    @4  go to state 54


state 34

   29 statement: Do . beginloop @6 statements endloop While @7 bool_exp

    BEGINLOOP  shift, and go to state 55

    beginloop  go to state 56


state 35

   30 statement: read . vars

    IDENT  shift, and go to state 5

    vars        go to state 57
    var         go to state 58
    identifier  go to state 31


state 36

   31 statement: write . vars

    IDENT  shift, and go to state 5

    vars        go to state 59
    var         go to state 58
    identifier  go to state 31


state 37

   32 statement: Continue .

    $default  reduce using rule 32 (statement)


state 38

    6 declarations2: declarations .

    $default  reduce using rule 6 (declarations2)


state 39

    5 declarations: declaration semicolon declarations2 .

    $default  reduce using rule 5 (declarations)


state 40

   76 colon: COLON .

    $default  reduce using rule 76 (colon)


state 41

    8 declaration: identifier declaration2 colon . array_block integer

    ARRAY  shift, and go to state 60

    $default  reduce using rule 12 (array_block)

    array_block  go to state 61
    array        go to state 62


state 42

    9 declaration2: comma identifier . declaration2

    COMMA  shift, and go to state 19

    $default  reduce using rule 10 (declaration2)

    declaration2  go to state 63
    comma         go to state 21


state 43

   15 statements: statement semicolon . statements2

    IF        shift, and go to state 22
    WHILE     shift, and go to state 23
    DO        shift, and go to state 24
    CONTINUE  shift, and go to state 25
    READ      shift, and go to state 26
    WRITE     shift, and go to state 27
    IDENT     shift, and go to state 5

    $default  reduce using rule 17 (statements2)

    statements   go to state 64
    statements2  go to state 65
    statement    go to state 29
    var          go to state 30
    identifier   go to state 31
    If           go to state 32
    While        go to state 33
    Do           go to state 34
    read         go to state 35
    write        go to state 36
    Continue     go to state 37


state 44

  113 assign: ASSIGN .

    $default  reduce using rule 113 (assign)


state 45

   21 statement: var assign . exp

    SUB  shift, and go to state 66

    $default  reduce using rule 56 (sub_exp)

    exp       go to state 67
    sub_exp   go to state 68
    mult_exp  go to state 69
    term      go to state 70
    sub       go to state 71


state 46

   81 l_paren: L_PAREN .

    $default  reduce using rule 81 (l_paren)


state 47

   72 var: identifier l_paren . neg_array exp r_paren

    SUB  shift, and go to state 66

    SUB       [reduce using rule 14 (neg_array)]
    $default  reduce using rule 14 (neg_array)

    neg_array  go to state 72
    sub        go to state 73


state 48

   98 not: NOT .

    $default  reduce using rule 98 (not)


state 49

   23 statement: If bool_exp . then @3 statements if_else endif

    THEN  shift, and go to state 74

    then  go to state 75


state 50

   33 bool_exp: relation_and_exp . or_exp

    OR  shift, and go to state 76

    $default  reduce using rule 35 (or_exp)

    or_exp  go to state 77
    or      go to state 78


state 51

   36 relation_and_exp: relation_exp . and_exp

    AND  shift, and go to state 79

    $default  reduce using rule 38 (and_exp)

    and_exp  go to state 80
    and      go to state 81


state 52

   39 relation_exp: not_exp . relation_exp2

    TRUE     shift, and go to state 82
    FALSE    shift, and go to state 83
    SUB      shift, and go to state 66
    L_PAREN  shift, and go to state 46

    L_PAREN   [reduce using rule 56 (sub_exp)]
    $default  reduce using rule 56 (sub_exp)

    relation_exp2  go to state 84
    exp            go to state 85
    sub_exp        go to state 68
    mult_exp       go to state 69
    term           go to state 70
    l_paren        go to state 86
    True           go to state 87
    False          go to state 88
    sub            go to state 71


state 53

   44 not_exp: not .

    $default  reduce using rule 44 (not_exp)


state 54

   26 statement: While @4 . bool_exp @5 beginloop statements endloop

    NOT  shift, and go to state 48

    $default  reduce using rule 45 (not_exp)

    bool_exp          go to state 89
    relation_and_exp  go to state 50
    relation_exp      go to state 51
    not_exp           go to state 52
    not               go to state 53


state 55

   91 beginloop: BEGINLOOP .

    $default  reduce using rule 91 (beginloop)


state 56

   29 statement: Do beginloop . @6 statements endloop While @7 bool_exp

    $default  reduce using rule 27 (@6)

    @6  go to state 90


state 57

   30 statement: read vars .

    $default  reduce using rule 30 (statement)


state 58

   68 vars: var . vars2

    COMMA  shift, and go to state 19

    $default  reduce using rule 70 (vars2)

    vars2  go to state 91
    comma  go to state 92


state 59

   31 statement: write vars .

    $default  reduce using rule 31 (statement)


state 60

   80 array: ARRAY .

    $default  reduce using rule 80 (array)


state 61

    8 declaration: identifier declaration2 colon array_block . integer

    INTEGER  shift, and go to state 93

    integer  go to state 94


state 62

   11 array_block: array . l_paren neg_array number r_paren of

    L_PAREN  shift, and go to state 46

    l_paren  go to state 95


state 63

    9 declaration2: comma identifier declaration2 .

    $default  reduce using rule 9 (declaration2)


state 64

   16 statements2: statements .

    $default  reduce using rule 16 (statements2)


state 65

   15 statements: statement semicolon statements2 .

    $default  reduce using rule 15 (statements)


state 66

  108 sub: SUB .

    $default  reduce using rule 108 (sub)


state 67

   21 statement: var assign exp .

    $default  reduce using rule 21 (statement)


state 68

   64 term: sub_exp . term2

    L_PAREN  shift, and go to state 46
    IDENT    shift, and go to state 5
    NUMBER   shift, and go to state 96

    term2       go to state 97
    var         go to state 98
    identifier  go to state 31
    l_paren     go to state 99
    number      go to state 100


state 69

   52 exp: mult_exp . add_exp sub_exp

    ADD  shift, and go to state 101

    $default  reduce using rule 54 (add_exp)

    add_exp  go to state 102
    add      go to state 103


state 70

   57 mult_exp: term . mult_exp2 div_exp mod_exp

    MULT  shift, and go to state 104

    $default  reduce using rule 59 (mult_exp2)

    mult_exp2  go to state 105
    mult       go to state 106


state 71

   55 sub_exp: sub . exp

    SUB  shift, and go to state 66

    $default  reduce using rule 56 (sub_exp)

    exp       go to state 107
    sub_exp   go to state 68
    mult_exp  go to state 69
    term      go to state 70
    sub       go to state 71


state 72

   72 var: identifier l_paren neg_array . exp r_paren

    SUB  shift, and go to state 66

    $default  reduce using rule 56 (sub_exp)

    exp       go to state 108
    sub_exp   go to state 68
    mult_exp  go to state 69
    term      go to state 70
    sub       go to state 71


state 73

   13 neg_array: sub .

    $default  reduce using rule 13 (neg_array)


state 74

   86 then: THEN .

    $default  reduce using rule 86 (then)


state 75

   23 statement: If bool_exp then . @3 statements if_else endif

    $default  reduce using rule 22 (@3)

    @3  go to state 109


state 76

   97 or: OR .

    $default  reduce using rule 97 (or)


state 77

   33 bool_exp: relation_and_exp or_exp .

    $default  reduce using rule 33 (bool_exp)


state 78

   34 or_exp: or . bool_exp

    NOT  shift, and go to state 48

    $default  reduce using rule 45 (not_exp)

    bool_exp          go to state 110
    relation_and_exp  go to state 50
    relation_exp      go to state 51
    not_exp           go to state 52
    not               go to state 53


state 79

   96 and: AND .

    $default  reduce using rule 96 (and)


state 80

   36 relation_and_exp: relation_exp and_exp .

    $default  reduce using rule 36 (relation_and_exp)


state 81

   37 and_exp: and . relation_and_exp

    NOT  shift, and go to state 48

    $default  reduce using rule 45 (not_exp)

    relation_and_exp  go to state 111
    relation_exp      go to state 51
    not_exp           go to state 52
    not               go to state 53


state 82

   99 True: TRUE .

    $default  reduce using rule 99 (True)


state 83

  100 False: FALSE .

    $default  reduce using rule 100 (False)


state 84

   39 relation_exp: not_exp relation_exp2 .

    $default  reduce using rule 39 (relation_exp)


state 85

   40 relation_exp2: exp . comp exp

    EQ   shift, and go to state 112
    NEQ  shift, and go to state 113
    LT   shift, and go to state 114
    GT   shift, and go to state 115
    LTE  shift, and go to state 116
    GTE  shift, and go to state 117

    comp             go to state 118
    equal            go to state 119
    not_equal        go to state 120
    less_than        go to state 121
    greater_than     go to state 122
    less_than_eq     go to state 123
    greater_than_eq  go to state 124


state 86

   43 relation_exp2: l_paren . bool_exp r_paren

    NOT  shift, and go to state 48

    $default  reduce using rule 45 (not_exp)

    bool_exp          go to state 125
    relation_and_exp  go to state 50
    relation_exp      go to state 51
    not_exp           go to state 52
    not               go to state 53


state 87

   41 relation_exp2: True .

    $default  reduce using rule 41 (relation_exp2)


state 88

   42 relation_exp2: False .

    $default  reduce using rule 42 (relation_exp2)


state 89

   26 statement: While @4 bool_exp . @5 beginloop statements endloop

    $default  reduce using rule 25 (@5)

    @5  go to state 126


state 90

   29 statement: Do beginloop @6 . statements endloop While @7 bool_exp

    IF        shift, and go to state 22
    WHILE     shift, and go to state 23
    DO        shift, and go to state 24
    CONTINUE  shift, and go to state 25
    READ      shift, and go to state 26
    WRITE     shift, and go to state 27
    IDENT     shift, and go to state 5

    statements  go to state 127
    statement   go to state 29
    var         go to state 30
    identifier  go to state 31
    If          go to state 32
    While       go to state 33
    Do          go to state 34
    read        go to state 35
    write       go to state 36
    Continue    go to state 37


state 91

   68 vars: var vars2 .

    $default  reduce using rule 68 (vars)


state 92

   69 vars2: comma . vars

    IDENT  shift, and go to state 5

    vars        go to state 128
    var         go to state 58
    identifier  go to state 31


state 93

  112 integer: INTEGER .

    $default  reduce using rule 112 (integer)


state 94

    8 declaration: identifier declaration2 colon array_block integer .

    $default  reduce using rule 8 (declaration)


state 95

   11 array_block: array l_paren . neg_array number r_paren of

    SUB  shift, and go to state 66

    $default  reduce using rule 14 (neg_array)

    neg_array  go to state 129
    sub        go to state 73


state 96

   82 number: NUMBER .

    $default  reduce using rule 82 (number)


state 97

   64 term: sub_exp term2 .

    $default  reduce using rule 64 (term)


state 98

   65 term2: var .

    $default  reduce using rule 65 (term2)


state 99

   67 term2: l_paren . exp r_paren

    SUB  shift, and go to state 66

    $default  reduce using rule 56 (sub_exp)

    exp       go to state 130
    sub_exp   go to state 68
    mult_exp  go to state 69
    term      go to state 70
    sub       go to state 71


state 100

   66 term2: number .

    $default  reduce using rule 66 (term2)


state 101

  107 add: ADD .

    $default  reduce using rule 107 (add)


state 102

   52 exp: mult_exp add_exp . sub_exp

    SUB  shift, and go to state 66

    SUB       [reduce using rule 56 (sub_exp)]
    $default  reduce using rule 56 (sub_exp)

    sub_exp  go to state 131
    sub      go to state 71


state 103

   53 add_exp: add . exp

    SUB  shift, and go to state 66

    $default  reduce using rule 56 (sub_exp)

    exp       go to state 132
    sub_exp   go to state 68
    mult_exp  go to state 69
    term      go to state 70
    sub       go to state 71


state 104

  109 mult: MULT .

    $default  reduce using rule 109 (mult)


state 105

   57 mult_exp: term mult_exp2 . div_exp mod_exp

    DIV  shift, and go to state 133

    DIV       [reduce using rule 61 (div_exp)]
    $default  reduce using rule 61 (div_exp)

    div_exp  go to state 134
    div      go to state 135


state 106

   58 mult_exp2: mult . mult_exp

    SUB  shift, and go to state 66

    $default  reduce using rule 56 (sub_exp)

    sub_exp   go to state 68
    mult_exp  go to state 136
    term      go to state 70
    sub       go to state 71


state 107

   55 sub_exp: sub exp .

    $default  reduce using rule 55 (sub_exp)


state 108

   72 var: identifier l_paren neg_array exp . r_paren

    R_PAREN  shift, and go to state 137

    r_paren  go to state 138


state 109

   23 statement: If bool_exp then @3 . statements if_else endif

    IF        shift, and go to state 22
    WHILE     shift, and go to state 23
    DO        shift, and go to state 24
    CONTINUE  shift, and go to state 25
    READ      shift, and go to state 26
    WRITE     shift, and go to state 27
    IDENT     shift, and go to state 5

    statements  go to state 139
    statement   go to state 29
    var         go to state 30
    identifier  go to state 31
    If          go to state 32
    While       go to state 33
    Do          go to state 34
    read        go to state 35
    write       go to state 36
    Continue    go to state 37


state 110

   34 or_exp: or bool_exp .

    $default  reduce using rule 34 (or_exp)


state 111

   37 and_exp: and relation_and_exp .

    $default  reduce using rule 37 (and_exp)


state 112

  101 equal: EQ .

    $default  reduce using rule 101 (equal)


state 113

  102 not_equal: NEQ .

    $default  reduce using rule 102 (not_equal)


state 114

  103 less_than: LT .

    $default  reduce using rule 103 (less_than)


state 115

  104 greater_than: GT .

    $default  reduce using rule 104 (greater_than)


state 116

  105 less_than_eq: LTE .

    $default  reduce using rule 105 (less_than_eq)


state 117

  106 greater_than_eq: GTE .

    $default  reduce using rule 106 (greater_than_eq)


state 118

   40 relation_exp2: exp comp . exp

    SUB  shift, and go to state 66

    $default  reduce using rule 56 (sub_exp)

    exp       go to state 140
    sub_exp   go to state 68
    mult_exp  go to state 69
    term      go to state 70
    sub       go to state 71


state 119

   46 comp: equal .

    $default  reduce using rule 46 (comp)


state 120

   47 comp: not_equal .

    $default  reduce using rule 47 (comp)


state 121

   48 comp: less_than .

    $default  reduce using rule 48 (comp)


state 122

   49 comp: greater_than .

    $default  reduce using rule 49 (comp)


state 123

   50 comp: less_than_eq .

    $default  reduce using rule 50 (comp)


state 124

   51 comp: greater_than_eq .

    $default  reduce using rule 51 (comp)


state 125

   43 relation_exp2: l_paren bool_exp . r_paren

    R_PAREN  shift, and go to state 137

    r_paren  go to state 141


state 126

   26 statement: While @4 bool_exp @5 . beginloop statements endloop

    BEGINLOOP  shift, and go to state 55

    beginloop  go to state 142


state 127

   29 statement: Do beginloop @6 statements . endloop While @7 bool_exp

    ENDLOOP  shift, and go to state 143

    endloop  go to state 144


state 128

   69 vars2: comma vars .

    $default  reduce using rule 69 (vars2)


state 129

   11 array_block: array l_paren neg_array . number r_paren of

    NUMBER  shift, and go to state 96

    number  go to state 145


state 130

   67 term2: l_paren exp . r_paren

    R_PAREN  shift, and go to state 137

    r_paren  go to state 146


state 131

   52 exp: mult_exp add_exp sub_exp .

    $default  reduce using rule 52 (exp)


state 132

   53 add_exp: add exp .

    $default  reduce using rule 53 (add_exp)


state 133

  110 div: DIV .

    $default  reduce using rule 110 (div)


state 134

   57 mult_exp: term mult_exp2 div_exp . mod_exp

    MOD  shift, and go to state 147

    MOD       [reduce using rule 63 (mod_exp)]
    $default  reduce using rule 63 (mod_exp)

    mod_exp  go to state 148
    mod      go to state 149


state 135

   60 div_exp: div . mult_exp

    SUB  shift, and go to state 66

    $default  reduce using rule 56 (sub_exp)

    sub_exp   go to state 68
    mult_exp  go to state 150
    term      go to state 70
    sub       go to state 71


state 136

   58 mult_exp2: mult mult_exp .

    $default  reduce using rule 58 (mult_exp2)


state 137

   83 r_paren: R_PAREN .

    $default  reduce using rule 83 (r_paren)


state 138

   72 var: identifier l_paren neg_array exp r_paren .

    $default  reduce using rule 72 (var)


state 139

   23 statement: If bool_exp then @3 statements . if_else endif

    ELSE  shift, and go to state 151

    $default  reduce using rule 20 (if_else)

    if_else  go to state 152
    Else     go to state 153


state 140

   40 relation_exp2: exp comp exp .

    $default  reduce using rule 40 (relation_exp2)


state 141

   43 relation_exp2: l_paren bool_exp r_paren .

    $default  reduce using rule 43 (relation_exp2)


state 142

   26 statement: While @4 bool_exp @5 beginloop . statements endloop

    IF        shift, and go to state 22
    WHILE     shift, and go to state 23
    DO        shift, and go to state 24
    CONTINUE  shift, and go to state 25
    READ      shift, and go to state 26
    WRITE     shift, and go to state 27
    IDENT     shift, and go to state 5

    statements  go to state 154
    statement   go to state 29
    var         go to state 30
    identifier  go to state 31
    If          go to state 32
    While       go to state 33
    Do          go to state 34
    read        go to state 35
    write       go to state 36
    Continue    go to state 37


state 143

   92 endloop: ENDLOOP .

    $default  reduce using rule 92 (endloop)


state 144

   29 statement: Do beginloop @6 statements endloop . While @7 bool_exp

    WHILE  shift, and go to state 23

    While  go to state 155


state 145

   11 array_block: array l_paren neg_array number . r_paren of

    R_PAREN  shift, and go to state 137

    r_paren  go to state 156


state 146

   67 term2: l_paren exp r_paren .

    $default  reduce using rule 67 (term2)


state 147

  111 mod: MOD .

    $default  reduce using rule 111 (mod)


state 148

   57 mult_exp: term mult_exp2 div_exp mod_exp .

    $default  reduce using rule 57 (mult_exp)


state 149

   62 mod_exp: mod . mult_exp

    SUB  shift, and go to state 66

    $default  reduce using rule 56 (sub_exp)

    sub_exp   go to state 68
    mult_exp  go to state 157
    term      go to state 70
    sub       go to state 71


state 150

   60 div_exp: div mult_exp .

    $default  reduce using rule 60 (div_exp)


state 151

   88 Else: ELSE .

    $default  reduce using rule 88 (Else)


state 152

   23 statement: If bool_exp then @3 statements if_else . endif

    ENDIF  shift, and go to state 158

    endif  go to state 159


state 153

   19 if_else: Else . @2 statements

    $default  reduce using rule 18 (@2)

    @2  go to state 160


state 154

   26 statement: While @4 bool_exp @5 beginloop statements . endloop

    ENDLOOP  shift, and go to state 143

    endloop  go to state 161


state 155

   29 statement: Do beginloop @6 statements endloop While . @7 bool_exp

    $default  reduce using rule 28 (@7)

    @7  go to state 162


state 156

   11 array_block: array l_paren neg_array number r_paren . of

    OF  shift, and go to state 163

    of  go to state 164


state 157

   62 mod_exp: mod mult_exp .

    $default  reduce using rule 62 (mod_exp)


state 158

   87 endif: ENDIF .

    $default  reduce using rule 87 (endif)


state 159

   23 statement: If bool_exp then @3 statements if_else endif .

    $default  reduce using rule 23 (statement)


state 160

   19 if_else: Else @2 . statements

    IF        shift, and go to state 22
    WHILE     shift, and go to state 23
    DO        shift, and go to state 24
    CONTINUE  shift, and go to state 25
    READ      shift, and go to state 26
    WRITE     shift, and go to state 27
    IDENT     shift, and go to state 5

    statements  go to state 165
    statement   go to state 29
    var         go to state 30
    identifier  go to state 31
    If          go to state 32
    While       go to state 33
    Do          go to state 34
    read        go to state 35
    write       go to state 36
    Continue    go to state 37


state 161

   26 statement: While @4 bool_exp @5 beginloop statements endloop .

    $default  reduce using rule 26 (statement)


state 162

   29 statement: Do beginloop @6 statements endloop While @7 . bool_exp

    NOT  shift, and go to state 48

    $default  reduce using rule 45 (not_exp)

    bool_exp          go to state 166
    relation_and_exp  go to state 50
    relation_exp      go to state 51
    not_exp           go to state 52
    not               go to state 53


state 163

   84 of: OF .

    $default  reduce using rule 84 (of)


state 164

   11 array_block: array l_paren neg_array number r_paren of .

    $default  reduce using rule 11 (array_block)


state 165

   19 if_else: Else @2 statements .

    $default  reduce using rule 19 (if_else)


state 166

   29 statement: Do beginloop @6 statements endloop While @7 bool_exp .

    $default  reduce using rule 29 (statement)
